#!/usr/bin/env ruby

require 'optparse'
require 'awesome_print'
require 'hashie'
require 'perseus'

search_query = ARGV[0]
texts = Perseus::FileIndex.new.corpus.select do |e|
  e.groupname.match(/#{search_query}/)
end

def print_coprus_info groupname, type, title, urn, language, description = nil
  puts "#{groupname} - #{title.purple}: #{urn.yellow}, #{type}: #{language}"
  unless description.nil?
    puts description.cyan
  end
end

puts "Found #{texts.size} collections/authors matching your query: #{search_query}"
texts.each do |t|
  groupname = t.groupname
  t.work.each_with_index do |work, i|
    begin
      # Check if we have many editions
      unless work["edition"].nil?
        language = work["xml:lang"]
        if work.edition.kind_of?(Array)
          work.edition.each do |edition|
            title = edition.label
            urn = edition.urn
            desc = edition.description
            print_coprus_info groupname, "edition", title, urn, language.green, desc
          end
        else
          title = work.title
          urn = work.edition.urn
          desc = work.edition.description
          print_coprus_info groupname, "edition", title, urn, language.green
        end
      end
      # Check to see if we have translations
      unless work["translation"].nil?
        # Check if we have many translations
        if work.translation.kind_of?(Array)
          work.translation.each do |translation|
            title = translation.label
            urn = translation.urn
            language = translation["xml:lang"]
            print_coprus_info groupname, "translation", title, urn, language.redish
          end
        else
          title = work.title
          urn = work.translation.urn
          language = work.translation["xml:lang"]
          print_coprus_info groupname, "translation", title, urn, language.redish
        end
      end
    rescue Exception => e
      puts "exception: #{e.message.red}"
      #puts "Stack trace: #{backtrace.map {|l| "  #{l}\n"}.join}"
      puts "We were working in group: #{groupname.cyan} with the following data point:".green
      puts work.inspect.yellow
    end
    #puts JSON.pretty_generate(results)
  end
end
