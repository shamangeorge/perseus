#!/usr/bin/env ruby

require 'optparse'
require 'optparse/time'
require 'ostruct'
require 'pp'
require 'awesome_print'
require 'perseus'
require 'perseus/network_index_xml'
require 'perseus/file_index_xml'

class OptparseExample
  Version = Perseus::VERSION
  class ScriptOptions
    attr_accessor :query,
                  :search_by,
                  :verbose
    def initialize
      self.query = nil
      self.search_by = "group"
      self.verbose = false
    end

    def define_options(parser)
      parser.banner = "Usage: perseus [options]"
      parser.separator ""
      parser.separator "Specific options:"

      # add additional options
      generate_index(parser)
      search_a_word(parser)
      get_passage_valid_references(parser)
      get_passage(parser)
      search_by_title_option(parser)
      search_by_group_option(parser)
      boolean_verbose_option(parser)

      parser.separator ""
      parser.separator "Common options:"
      # No argument, shows at tail.  This will print an options summary.
      # Try it and see!
      parser.on_tail("-h", "--help", "Show this message") do
        puts parser
        exit
      end
      # Another typical switch to print the version.
      parser.on_tail("--version", "Show version") do
        puts Version
        exit
      end
    end

    def generate_index(parser)
            #Optional '--type' option argument with keyword completion.
      parser.on("--generate_json []", [:network, :local],
                "Generates the perseus indeces in json format choose fetch method (network -> download, save and index from network, local -> index from already downloaded xml file)") do |source|
        Perseus::NetworkIndexXML.new.generate_json_indeces if source.eql? :network
        Perseus::FileIndexXML.new.generate_json_indeces if source.eql? :local
        exit
      end
    end

    def search_a_word(parser)
      parser.on("--word WORD", "Search ancient greek or latin word") do |word|
        w = Perseus::Dictionary.new(word)
        puts JSON.pretty_generate(w.to_h)
        exit
      end
    end

    def get_passage_valid_references(parser)
      parser.on("--valid_refs URN", "Get valid urn's to query passage content") do |urn|
        refs = Perseus::CorpusReferences.new(urn)
        reference_links = refs.to_h["GetValidReff"]["reply"]["reff"]["urn"]
        puts "You are about to get a list of valid references for this passage"
        puts "Are you sure you want the all printed on the screen?".red
        puts "Answering anything but yes will only print the first 10 references".yellow
        print_all = gets
        if print_all.eql? "yes"
          reference_links.each { |link|  puts link.cyan }
        else
          reference_links.each_with_index { |link, i| puts link.cyan if i < 10 }
        end
        #.map { |e|
          #e.split(":").last
        #}
        exit
      end
    end

    def get_passage(parser)
      parser.on("--passage URN", "Get passage content for given urn") do |urn|
        passage = Perseus::Passage.new(urn)
        puts JSON.pretty_generate(passage.to_h)
        exit
      end
    end

    def search_by_title_option(parser)
      parser.on("--title TITLE", "Search by title") do |query|
        self.search_by = "label"
        self.query = query
      end
    end

    def search_by_group_option(parser)
      parser.on("--author GROUPNAME/AUTHOR", "Search by groupname/author") do |query|
        self.search_by = "groupname"
        self.query = query
      end
    end

    def boolean_verbose_option(parser)
      # Boolean switch.
      parser.on("-v", "--[no-]verbose", "Run verbosely") do |v|
        self.verbose = v
      end
    end
  end

  def parse(args)
    @options = ScriptOptions.new
    @args = OptionParser.new do |parser|
      @options.define_options(parser)
      parser.parse!(args)
    end
    @options
  end

  attr_reader :parser, :options
end

options = OptparseExample.new.parse(ARGV)
unless options.query.nil?
  texts = Perseus::Corpora.new.all.deep_locate -> (key, value, object) {
    key == options.search_by && value.include?(options.query)
  }
  puts "Found #{texts.size} editions matching your query: #{options.query}"
  Perseus.print_editions texts
end
